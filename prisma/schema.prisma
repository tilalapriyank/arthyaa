// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SOCIETY_ADMIN
  MEMBER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id        String    @id @default(cuid())
  email     String?   @unique
  phone     String?   @unique
  password  String?
  role      UserRole  @default(MEMBER)
  status    UserStatus @default(ACTIVE)
  firstName String?
  lastName  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // OTP related fields for members
  otpCode   String?
  otpExpiry DateTime?
  isOtpVerified Boolean @default(false)

  // Firebase integration
  firebaseUid String? @unique

  // Password reset
  resetToken     String?
  resetTokenExpiry DateTime?

  // Security tracking
  lastLoginAt    DateTime?
  failedLoginAttempts Int @default(0)
  accountLockedUntil DateTime?

  // Email verification
  isEmailVerified Boolean @default(false)
  emailVerificationToken String?

  // Secretary field for members
  isSecretary Boolean @default(false)

  // Society relationship
  societyId String?
  society   Society? @relation(fields: [societyId], references: [id])

  // Relations
  sessions UserSession[]
  auditLogs AuditLog[]

  @@map("users")
}

model Society {
  id          String   @id @default(cuid())
  name        String
  address     String?
  city        String?
  state       String?
  pincode     String?
  email       String?
  mobile      String?
  whatsapp    String?
  blocks      Int?
  flats       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users   User[]

  @@map("societies")
}

model OTPLog {
  id        String   @id @default(cuid())
  phone     String
  otpCode   String
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  ipAddress String?
  userAgent String?

  @@map("otp_logs")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // LOGIN, LOGOUT, PASSWORD_RESET, OTP_REQUEST, etc.
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model RateLimitLog {
  id        String   @id @default(cuid())
  identifier String  // phone number, email, or IP
  action    String   // OTP_REQUEST, LOGIN_ATTEMPT, etc.
  count     Int      @default(1)
  windowStart DateTime @default(now())
  expiresAt DateTime

  @@unique([identifier, action])
  @@map("rate_limit_logs")
}
