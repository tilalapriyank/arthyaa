// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SOCIETY_ADMIN
  MEMBER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum MemberType {
  OWNER
  TENANT
}

model User {
  id        String    @id @default(cuid())
  email     String?   @unique
  phone     String?   @unique
  password  String?
  role      UserRole  @default(MEMBER)
  status    UserStatus @default(ACTIVE)
  firstName String?
  lastName  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // OTP related fields for members
  otpCode   String?
  otpExpiry DateTime?
  isOtpVerified Boolean @default(false)

  // Firebase integration
  firebaseUid String? @unique

  // Password reset
  resetToken     String?
  resetTokenExpiry DateTime?
  
  // Password setup for new accounts
  setupToken     String?
  setupTokenExpiry DateTime?

  // Security tracking
  lastLoginAt    DateTime?
  failedLoginAttempts Int @default(0)
  accountLockedUntil DateTime?

  // Email verification
  isEmailVerified Boolean @default(false)
  emailVerificationToken String?

  // Secretary field for members
  isSecretary Boolean @default(false)

  // Member-specific fields
  memberType MemberType?
  flatNumber String?
  blockNumber String?
  
  // Document fields for tenants
  agreementDocument String? // File path/URL
  agreementDocumentStatus String? // PENDING, APPROVED, REJECTED
  policyVerificationDocument String? // File path/URL
  policyVerificationDocumentStatus String? // PENDING, APPROVED, REJECTED
  policyVerificationDeadline DateTime? // Deadline for policy verification upload

  // Society relationship
  societyId String?
  society   Society? @relation(fields: [societyId], references: [id])

  // Relations
  sessions UserSession[]
  auditLogs AuditLog[]
  receipts Receipt[]

  @@map("users")
}

model Society {
  id          String   @id @default(cuid())
  name        String
  address     String?
  city        String?
  state       String?
  pincode     String?
  email       String?
  mobile      String?
  whatsapp    String?
  blocks      Int?
  flats       Int?
  logo        String?  // Path to logo file
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users   User[]
  blockList  Block[]
  receipts Receipt[]

  @@map("societies")
}

model OTPLog {
  id        String   @id @default(cuid())
  phone     String
  otpCode   String
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  ipAddress String?
  userAgent String?

  @@map("otp_logs")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // LOGIN, LOGOUT, PASSWORD_RESET, OTP_REQUEST, etc.
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model RateLimitLog {
  id        String   @id @default(cuid())
  identifier String  // phone number, email, or IP
  action    String   // OTP_REQUEST, LOGIN_ATTEMPT, etc.
  count     Int      @default(1)
  windowStart DateTime @default(now())
  expiresAt DateTime

  @@unique([identifier, action])
  @@map("rate_limit_logs")
}

model Block {
  id        String   @id @default(cuid())
  name      String
  societyId String
  society   Society @relation(fields: [societyId], references: [id])
  flats     Flat[]

  @@map("blocks")
}

model Flat {
  id        String   @id @default(cuid())
  name      String
  floorNumber Int
  blockId String
  block   Block @relation(fields: [blockId], references: [id])

  @@map("flats")
}

enum ReceiptStatus {
  APPROVED
  REJECTED
}

enum PaymentMethod {
  CASH
  UPI
  BANK_TRANSFER
  CHEQUE
}

model Receipt {
  id          String   @id @default(cuid())
  memberId    String
  member      User     @relation(fields: [memberId], references: [id])
  societyId   String
  society     Society  @relation(fields: [societyId], references: [id])
  
  // Receipt details
  blockNumber String
  flatNumber  String
  amount      Float
  paymentDate DateTime
  purpose     String   // maintenance, water, electricity, etc.
  
  // Payment method details
  paymentMethod PaymentMethod
  transactionId String? // For bank transfers
  upiId        String? // For UPI payments
  
  // Document
  documentUrl  String
  documentName String
  
  // OCR extracted data
  ocrData      Json?    // Store OCR extracted information
  ocrConfidence Float?  // Confidence score from OCR
  
  // Manual vs OCR comparison
  isManualEntry Boolean @default(false)
  ocrMatchScore Float?  // How well OCR data matches manual entry
  
  // Status and approval
  status       ReceiptStatus @default(APPROVED)
  autoApproved Boolean @default(true)
  generatedReceiptUrl String? // URL to generated receipt PDF
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("receipts")
}